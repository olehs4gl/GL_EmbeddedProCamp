
f303gl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001794  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800194c  0800194c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800194c  0800194c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800194c  0800194c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800194c  0800194c  0001194c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001950  08001950  00011950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001960  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001960  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b93  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bba  00000000  00000000  00023bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000390  00000000  00000000  00024790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  00024b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d86  00000000  00000000  00024e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000038f3  00000000  00000000  0003cbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a69c  00000000  00000000  000404b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cab4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c6c  00000000  00000000  000cabc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001904 	.word	0x08001904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001904 	.word	0x08001904

080001c8 <main>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
//static void MX_GPIO_Init(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
 80001cc:	f000 f805 	bl	80001da <SystemClock_Config>

	gpio_init();
 80001d0:	f000 f886 	bl	80002e0 <gpio_init>

	// Infinite loop
	while (1)
	{

		gpio_blink();
 80001d4:	f000 f8a4 	bl	8000320 <gpio_blink>
 80001d8:	e7fc      	b.n	80001d4 <main+0xc>

080001da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	b090      	sub	sp, #64	; 0x40
 80001de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	2228      	movs	r2, #40	; 0x28
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fb83 	bl	80018f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fc:	2301      	movs	r3, #1
 80001fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000200:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000218:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fa54 	bl	80006d0 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800022e:	f000 f819 	bl	8000264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2102      	movs	r1, #2
 800024c:	4618      	mov	r0, r3
 800024e:	f001 f947 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000258:	f000 f804 	bl	8000264 <Error_Handler>
  }
}
 800025c:	bf00      	nop
 800025e:	3740      	adds	r7, #64	; 0x40
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
	...

08000274 <timer_init>:

#include "main.h"
#include "os_gpio.h"

void timer_init()
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

	RCC -> AHBENR  |= 0x00FF0000;//GPIO_G-A,H clock enable
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <timer_init+0x60>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <timer_init+0x60>)
 800027e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000282:	6153      	str	r3, [r2, #20]
	RCC -> CFGR |= 0x001D0401;//clock configuration
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <timer_init+0x60>)
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	4912      	ldr	r1, [pc, #72]	; (80002d4 <timer_init+0x60>)
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <timer_init+0x64>)
 800028c:	4313      	orrs	r3, r2
 800028e:	604b      	str	r3, [r1, #4]
	RCC -> CR |= 0x010D0000;//clock control
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <timer_init+0x60>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <timer_init+0x60>)
 8000296:	f043 7386 	orr.w	r3, r3, #17563648	; 0x10c0000
 800029a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800029e:	6013      	str	r3, [r2, #0]

	RCC -> APB1ENR	|= 0x00000002;//__TIM3_CLK_ENABLE();
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <timer_init+0x60>)
 80002a2:	69db      	ldr	r3, [r3, #28]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <timer_init+0x60>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	61d3      	str	r3, [r2, #28]

	TIM3 -> PSC = 9999;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <timer_init+0x68>)
 80002ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80002b2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3 -> ARR = 7199;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <timer_init+0x68>)
 80002b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80002ba:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3 -> CR1 |= 0x00000008;//OPM: One-pulse mode
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <timer_init+0x68>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <timer_init+0x68>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6013      	str	r3, [r2, #0]
//	TIM3 -> CR1 |= 0x00000001;
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000
 80002d8:	001d0401 	.word	0x001d0401
 80002dc:	40000400 	.word	0x40000400

080002e0 <gpio_init>:

void gpio_init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	RCC -> AHBENR  |= 0x00220000;//GPIOE,GPIOA clock enable
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <gpio_init+0x38>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <gpio_init+0x38>)
 80002ea:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 80002ee:	6153      	str	r3, [r2, #20]
	GPIOE -> MODER   |= 0x55550000;//PE8-15 output
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <gpio_init+0x3c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <gpio_init+0x3c>)
 80002f6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002fa:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 80002fe:	6013      	str	r3, [r2, #0]
	GPIOE -> OSPEEDR |= 0xFFFF0000;//PE8-15
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <gpio_init+0x3c>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a05      	ldr	r2, [pc, #20]	; (800031c <gpio_init+0x3c>)
 8000306:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800030a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800030e:	6093      	str	r3, [r2, #8]
	timer_init();
 8000310:	f7ff ffb0 	bl	8000274 <timer_init>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40021000 	.word	0x40021000
 800031c:	48001000 	.word	0x48001000

08000320 <gpio_blink>:


void gpio_blink(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

	static char on_off=0;
	if(((TIM3 -> CR1) & 0x00000001) == 0)
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <gpio_blink+0xbc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d150      	bne.n	80003d2 <gpio_blink+0xb2>
	{
		TIM3 -> CR1 |= 0x00000001;
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <gpio_blink+0xbc>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a29      	ldr	r2, [pc, #164]	; (80003dc <gpio_blink+0xbc>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6013      	str	r3, [r2, #0]
		if(on_off)
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <gpio_blink+0xc0>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d023      	beq.n	800038c <gpio_blink+0x6c>
		{
			on_off = 0;
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <gpio_blink+0xc0>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
			GPIOE -> BSRR = GPIO_BSRR_BS_9;
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <gpio_blink+0xc4>)
 800034c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000350:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_8;
 8000352:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <gpio_blink+0xc4>)
 8000354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000358:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_10;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <gpio_blink+0xc4>)
 800035c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000360:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_15;
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <gpio_blink+0xc4>)
 8000364:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000368:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_11;
 800036a:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <gpio_blink+0xc4>)
 800036c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000370:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_14;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <gpio_blink+0xc4>)
 8000374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000378:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_12;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <gpio_blink+0xc4>)
 800037c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000380:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BS_13;
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <gpio_blink+0xc4>)
 8000384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000388:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_14;
			GPIOE -> BSRR = GPIO_BSRR_BR_12;
			GPIOE -> BSRR = GPIO_BSRR_BR_13;
		}
	}
}
 800038a:	e022      	b.n	80003d2 <gpio_blink+0xb2>
			on_off = 1;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <gpio_blink+0xc0>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
			GPIOE -> BSRR = GPIO_BSRR_BR_9;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <gpio_blink+0xc4>)
 8000394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000398:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_8;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <gpio_blink+0xc4>)
 800039c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003a0:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_10;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <gpio_blink+0xc4>)
 80003a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80003a8:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_15;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <gpio_blink+0xc4>)
 80003ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80003b0:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_11;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <gpio_blink+0xc4>)
 80003b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003b8:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_14;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <gpio_blink+0xc4>)
 80003bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c0:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_12;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <gpio_blink+0xc4>)
 80003c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003c8:	619a      	str	r2, [r3, #24]
			GPIOE -> BSRR = GPIO_BSRR_BR_13;
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <gpio_blink+0xc4>)
 80003cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003d0:	619a      	str	r2, [r3, #24]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40000400 	.word	0x40000400
 80003e0:	20000028 	.word	0x20000028
 80003e4:	48001000 	.word	0x48001000

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <HardFault_Handler+0x4>

080003fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <MemManage_Handler+0x4>

08000402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <UsageFault_Handler+0x4>

0800040e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 f872 	bl	8000524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <SystemInit+0x28>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044e:	4a07      	ldr	r2, [pc, #28]	; (800046c <SystemInit+0x28>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <SystemInit+0x28>)
 800045a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800045e:	609a      	str	r2, [r3, #8]
#endif
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000474:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000476:	e003      	b.n	8000480 <LoopCopyDataInit>

08000478 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800047a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800047c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800047e:	3104      	adds	r1, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000484:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000486:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000488:	d3f6      	bcc.n	8000478 <CopyDataInit>
	ldr	r2, =_sbss
 800048a:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800048c:	e002      	b.n	8000494 <LoopFillZerobss>

0800048e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800048e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000490:	f842 3b04 	str.w	r3, [r2], #4

08000494 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <LoopForever+0x16>)
	cmp	r2, r3
 8000496:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000498:	d3f9      	bcc.n	800048e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800049a:	f7ff ffd3 	bl	8000444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800049e:	f001 fa05 	bl	80018ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004a2:	f7ff fe91 	bl	80001c8 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004a8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80004ac:	08001954 	.word	0x08001954
	ldr	r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004b4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80004b8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80004bc:	20000030 	.word	0x20000030

080004c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC1_2_IRQHandler>
	...

080004c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_InitTick+0x54>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_InitTick+0x58>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f8e8 	bl	80006b8 <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e00e      	b.n	8000510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d80a      	bhi.n	800050e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000500:	f000 f8be 	bl	8000680 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <HAL_InitTick+0x5c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	e000      	b.n	8000510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000008 	.word	0x20000008
 8000548:	2000002c 	.word	0x2000002c

0800054c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000002c 	.word	0x2000002c

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	; (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	; (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf28      	it	cs
 80005f2:	2304      	movcs	r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d902      	bls.n	8000604 <NVIC_EncodePriority+0x30>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3b03      	subs	r3, #3
 8000602:	e000      	b.n	8000606 <NVIC_EncodePriority+0x32>
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43d9      	mvns	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	4313      	orrs	r3, r2
         );
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	; 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800064c:	d301      	bcc.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e00f      	b.n	8000672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <SysTick_Config+0x40>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	210f      	movs	r1, #15
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000660:	f7ff ff8e 	bl	8000580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <SysTick_Config+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <SysTick_Config+0x40>)
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010

08000680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000692:	f7ff ff67 	bl	8000564 <__NVIC_GetPriorityGrouping>
 8000696:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	6978      	ldr	r0, [r7, #20]
 800069e:	f7ff ff99 	bl	80005d4 <NVIC_EncodePriority>
 80006a2:	4602      	mov	r2, r0
 80006a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff68 	bl	8000580 <__NVIC_SetPriority>
}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ffbb 	bl	800063c <SysTick_Config>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f000 bef4 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 816a 	beq.w	80009ce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006fa:	4bb3      	ldr	r3, [pc, #716]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f003 030c 	and.w	r3, r3, #12
 8000702:	2b04      	cmp	r3, #4
 8000704:	d00c      	beq.n	8000720 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000706:	4bb0      	ldr	r3, [pc, #704]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f003 030c 	and.w	r3, r3, #12
 800070e:	2b08      	cmp	r3, #8
 8000710:	d159      	bne.n	80007c6 <HAL_RCC_OscConfig+0xf6>
 8000712:	4bad      	ldr	r3, [pc, #692]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800071a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800071e:	d152      	bne.n	80007c6 <HAL_RCC_OscConfig+0xf6>
 8000720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000724:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000728:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800072c:	fa93 f3a3 	rbit	r3, r3
 8000730:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000734:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000738:	fab3 f383 	clz	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b01      	cmp	r3, #1
 800074a:	d102      	bne.n	8000752 <HAL_RCC_OscConfig+0x82>
 800074c:	4b9e      	ldr	r3, [pc, #632]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	e015      	b.n	800077e <HAL_RCC_OscConfig+0xae>
 8000752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000756:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800075e:	fa93 f3a3 	rbit	r3, r3
 8000762:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000766:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800076a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800076e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000772:	fa93 f3a3 	rbit	r3, r3
 8000776:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800077a:	4b93      	ldr	r3, [pc, #588]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000782:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000786:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800078a:	fa92 f2a2 	rbit	r2, r2
 800078e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000792:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000796:	fab2 f282 	clz	r2, r2
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	f042 0220 	orr.w	r2, r2, #32
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	f002 021f 	and.w	r2, r2, #31
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	4013      	ands	r3, r2
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 810c 	beq.w	80009cc <HAL_RCC_OscConfig+0x2fc>
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	f040 8106 	bne.w	80009cc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f000 be86 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007d0:	d106      	bne.n	80007e0 <HAL_RCC_OscConfig+0x110>
 80007d2:	4b7d      	ldr	r3, [pc, #500]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a7c      	ldr	r2, [pc, #496]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e030      	b.n	8000842 <HAL_RCC_OscConfig+0x172>
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10c      	bne.n	8000804 <HAL_RCC_OscConfig+0x134>
 80007ea:	4b77      	ldr	r3, [pc, #476]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a76      	ldr	r2, [pc, #472]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80007f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b74      	ldr	r3, [pc, #464]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a73      	ldr	r2, [pc, #460]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80007fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e01e      	b.n	8000842 <HAL_RCC_OscConfig+0x172>
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800080e:	d10c      	bne.n	800082a <HAL_RCC_OscConfig+0x15a>
 8000810:	4b6d      	ldr	r3, [pc, #436]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a6c      	ldr	r2, [pc, #432]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b6a      	ldr	r3, [pc, #424]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a69      	ldr	r2, [pc, #420]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	e00b      	b.n	8000842 <HAL_RCC_OscConfig+0x172>
 800082a:	4b67      	ldr	r3, [pc, #412]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a66      	ldr	r2, [pc, #408]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	4b64      	ldr	r3, [pc, #400]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a63      	ldr	r2, [pc, #396]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 800083c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000840:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000842:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	f023 020f 	bic.w	r2, r3, #15
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	495d      	ldr	r1, [pc, #372]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000852:	4313      	orrs	r3, r2
 8000854:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d059      	beq.n	8000914 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000860:	f7ff fe74 	bl	800054c <HAL_GetTick>
 8000864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000868:	e00a      	b.n	8000880 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086a:	f7ff fe6f 	bl	800054c <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d902      	bls.n	8000880 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	f000 be29 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000884:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000888:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800088c:	fa93 f3a3 	rbit	r3, r3
 8000890:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000894:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000898:	fab3 f383 	clz	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d102      	bne.n	80008b2 <HAL_RCC_OscConfig+0x1e2>
 80008ac:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	e015      	b.n	80008de <HAL_RCC_OscConfig+0x20e>
 80008b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80008be:	fa93 f3a3 	rbit	r3, r3
 80008c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80008c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80008ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80008d2:	fa93 f3a3 	rbit	r3, r3
 80008d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80008e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80008ea:	fa92 f2a2 	rbit	r2, r2
 80008ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80008f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80008f6:	fab2 f282 	clz	r2, r2
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	f042 0220 	orr.w	r2, r2, #32
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	f002 021f 	and.w	r2, r2, #31
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	4013      	ands	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0ab      	beq.n	800086a <HAL_RCC_OscConfig+0x19a>
 8000912:	e05c      	b.n	80009ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000914:	f7ff fe1a 	bl	800054c <HAL_GetTick>
 8000918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091c:	e00a      	b.n	8000934 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091e:	f7ff fe15 	bl	800054c <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b64      	cmp	r3, #100	; 0x64
 800092c:	d902      	bls.n	8000934 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800092e:	2303      	movs	r3, #3
 8000930:	f000 bdcf 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000938:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000940:	fa93 f3a3 	rbit	r3, r3
 8000944:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000948:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b01      	cmp	r3, #1
 800095e:	d102      	bne.n	8000966 <HAL_RCC_OscConfig+0x296>
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	e015      	b.n	8000992 <HAL_RCC_OscConfig+0x2c2>
 8000966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800096a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000972:	fa93 f3a3 	rbit	r3, r3
 8000976:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800097a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000982:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000986:	fa93 f3a3 	rbit	r3, r3
 800098a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_RCC_OscConfig+0x2f8>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000996:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800099a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800099e:	fa92 f2a2 	rbit	r2, r2
 80009a2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80009a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80009aa:	fab2 f282 	clz	r2, r2
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	f042 0220 	orr.w	r2, r2, #32
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	f002 021f 	and.w	r2, r2, #31
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1ab      	bne.n	800091e <HAL_RCC_OscConfig+0x24e>
 80009c6:	e002      	b.n	80009ce <HAL_RCC_OscConfig+0x2fe>
 80009c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 816f 	beq.w	8000cbc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009de:	4bd0      	ldr	r3, [pc, #832]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 030c 	and.w	r3, r3, #12
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00b      	beq.n	8000a02 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009ea:	4bcd      	ldr	r3, [pc, #820]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 030c 	and.w	r3, r3, #12
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d16c      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x400>
 80009f6:	4bca      	ldr	r3, [pc, #808]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d166      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x400>
 8000a02:	2302      	movs	r3, #2
 8000a04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000a0c:	fa93 f3a3 	rbit	r3, r3
 8000a10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000a14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d102      	bne.n	8000a32 <HAL_RCC_OscConfig+0x362>
 8000a2c:	4bbc      	ldr	r3, [pc, #752]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	e013      	b.n	8000a5a <HAL_RCC_OscConfig+0x38a>
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a38:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000a3c:	fa93 f3a3 	rbit	r3, r3
 8000a40:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000a4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000a56:	4bb2      	ldr	r3, [pc, #712]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000a60:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000a64:	fa92 f2a2 	rbit	r2, r2
 8000a68:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000a6c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	f042 0220 	orr.w	r2, r2, #32
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	f002 021f 	and.w	r2, r2, #31
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d007      	beq.n	8000a9c <HAL_RCC_OscConfig+0x3cc>
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d002      	beq.n	8000a9c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f000 bd1b 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a9c:	4ba0      	ldr	r3, [pc, #640]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	21f8      	movs	r1, #248	; 0xf8
 8000aac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ab4:	fa91 f1a1 	rbit	r1, r1
 8000ab8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000abc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000ac0:	fab1 f181 	clz	r1, r1
 8000ac4:	b2c9      	uxtb	r1, r1
 8000ac6:	408b      	lsls	r3, r1
 8000ac8:	4995      	ldr	r1, [pc, #596]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ace:	e0f5      	b.n	8000cbc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8085 	beq.w	8000be6 <HAL_RCC_OscConfig+0x516>
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000aee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000af2:	fab3 f383 	clz	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000afc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	461a      	mov	r2, r3
 8000b04:	2301      	movs	r3, #1
 8000b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd20 	bl	800054c <HAL_GetTick>
 8000b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b10:	e00a      	b.n	8000b28 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b12:	f7ff fd1b 	bl	800054c <HAL_GetTick>
 8000b16:	4602      	mov	r2, r0
 8000b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d902      	bls.n	8000b28 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	f000 bcd5 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000b3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3e:	fab3 f383 	clz	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	095b      	lsrs	r3, r3, #5
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <HAL_RCC_OscConfig+0x488>
 8000b52:	4b73      	ldr	r3, [pc, #460]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	e013      	b.n	8000b80 <HAL_RCC_OscConfig+0x4b0>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000b62:	fa93 f3a3 	rbit	r3, r3
 8000b66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000b70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000b74:	fa93 f3a3 	rbit	r3, r3
 8000b78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000b7c:	4b68      	ldr	r3, [pc, #416]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b80:	2202      	movs	r2, #2
 8000b82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000b86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000b8a:	fa92 f2a2 	rbit	r2, r2
 8000b8e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000b92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	f042 0220 	orr.w	r2, r2, #32
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	f002 021f 	and.w	r2, r2, #31
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0af      	beq.n	8000b12 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb2:	4b5b      	ldr	r3, [pc, #364]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	21f8      	movs	r1, #248	; 0xf8
 8000bc2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000bca:	fa91 f1a1 	rbit	r1, r1
 8000bce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000bd2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000bd6:	fab1 f181 	clz	r1, r1
 8000bda:	b2c9      	uxtb	r1, r1
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	4950      	ldr	r1, [pc, #320]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
 8000be4:	e06a      	b.n	8000cbc <HAL_RCC_OscConfig+0x5ec>
 8000be6:	2301      	movs	r3, #1
 8000be8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000bf0:	fa93 f3a3 	rbit	r3, r3
 8000bf4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bfc:	fab3 f383 	clz	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2300      	movs	r3, #0
 8000c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c12:	f7ff fc9b 	bl	800054c <HAL_GetTick>
 8000c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1a:	e00a      	b.n	8000c32 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fc96 	bl	800054c <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d902      	bls.n	8000c32 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	f000 bc50 	b.w	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d102      	bne.n	8000c62 <HAL_RCC_OscConfig+0x592>
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	e013      	b.n	8000c8a <HAL_RCC_OscConfig+0x5ba>
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000c74:	2302      	movs	r3, #2
 8000c76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_RCC_OscConfig+0x650>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000c90:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000c94:	fa92 f2a2 	rbit	r2, r2
 8000c98:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000c9c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	f042 0220 	orr.w	r2, r2, #32
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	f002 021f 	and.w	r2, r2, #31
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1af      	bne.n	8000c1c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80da 	beq.w	8000e80 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d069      	beq.n	8000daa <HAL_RCC_OscConfig+0x6da>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8000ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_RCC_OscConfig+0x654>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d00:	f7ff fc24 	bl	800054c <HAL_GetTick>
 8000d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d08:	e00e      	b.n	8000d28 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fc1f 	bl	800054c <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d906      	bls.n	8000d28 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e3d9      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	10908120 	.word	0x10908120
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000d3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d3e:	2202      	movs	r2, #2
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	fa93 f2a3 	rbit	r2, r3
 8000d4c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000d56:	2202      	movs	r2, #2
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	fa93 f2a3 	rbit	r2, r3
 8000d64:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000d68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	4ba5      	ldr	r3, [pc, #660]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000d72:	2102      	movs	r1, #2
 8000d74:	6019      	str	r1, [r3, #0]
 8000d76:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	fa93 f1a3 	rbit	r1, r3
 8000d80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d84:	6019      	str	r1, [r3, #0]
  return result;
 8000d86:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	fab3 f383 	clz	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0b0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x63a>
 8000da8:	e06a      	b.n	8000e80 <HAL_RCC_OscConfig+0x7b0>
 8000daa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	fa93 f2a3 	rbit	r2, r3
 8000dbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dc0:	601a      	str	r2, [r3, #0]
  return result;
 8000dc2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dc6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b8c      	ldr	r3, [pc, #560]	; (8001004 <HAL_RCC_OscConfig+0x934>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2300      	movs	r3, #0
 8000dda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fbb6 	bl	800054c <HAL_GetTick>
 8000de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	e009      	b.n	8000dfa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de6:	f7ff fbb1 	bl	800054c <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e36b      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000dfa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000dfe:	2202      	movs	r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e02:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	fa93 f2a3 	rbit	r2, r3
 8000e0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e16:	2202      	movs	r2, #2
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	fa93 f2a3 	rbit	r2, r3
 8000e24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e2e:	2202      	movs	r2, #2
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	fa93 f2a3 	rbit	r2, r3
 8000e3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e42:	4b6f      	ldr	r3, [pc, #444]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	6019      	str	r1, [r3, #0]
 8000e4e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	fa93 f1a3 	rbit	r1, r3
 8000e58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e5c:	6019      	str	r1, [r3, #0]
  return result;
 8000e5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1b2      	bne.n	8000de6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8158 	beq.w	8001140 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e96:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d112      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a56      	ldr	r2, [pc, #344]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <HAL_RCC_OscConfig+0x938>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d11a      	bne.n	8000f0a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed4:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <HAL_RCC_OscConfig+0x938>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a4b      	ldr	r2, [pc, #300]	; (8001008 <HAL_RCC_OscConfig+0x938>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fb34 	bl	800054c <HAL_GetTick>
 8000ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	e009      	b.n	8000efe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eea:	f7ff fb2f 	bl	800054c <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	; 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e2e9      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	4b42      	ldr	r3, [pc, #264]	; (8001008 <HAL_RCC_OscConfig+0x938>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0ef      	beq.n	8000eea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0x852>
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a39      	ldr	r2, [pc, #228]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6213      	str	r3, [r2, #32]
 8000f20:	e02f      	b.n	8000f82 <HAL_RCC_OscConfig+0x8b2>
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10c      	bne.n	8000f46 <HAL_RCC_OscConfig+0x876>
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	6213      	str	r3, [r2, #32]
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a30      	ldr	r2, [pc, #192]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f3e:	f023 0304 	bic.w	r3, r3, #4
 8000f42:	6213      	str	r3, [r2, #32]
 8000f44:	e01d      	b.n	8000f82 <HAL_RCC_OscConfig+0x8b2>
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x89a>
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x8b2>
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a24      	ldr	r2, [pc, #144]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d06b      	beq.n	8001064 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fade 	bl	800054c <HAL_GetTick>
 8000f90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f94:	e00b      	b.n	8000fae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fad9 	bl	800054c <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e291      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 8000fae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	fa93 f2a3 	rbit	r2, r3
 8000fc0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000fca:	2202      	movs	r2, #2
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	fa93 f2a3 	rbit	r2, r3
 8000fd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fdc:	601a      	str	r2, [r3, #0]
  return result;
 8000fde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fe2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d109      	bne.n	800100c <HAL_RCC_OscConfig+0x93c>
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <HAL_RCC_OscConfig+0x930>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	e014      	b.n	8001028 <HAL_RCC_OscConfig+0x958>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	10908120 	.word	0x10908120
 8001008:	40007000 	.word	0x40007000
 800100c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001010:	2202      	movs	r2, #2
 8001012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	fa93 f2a3 	rbit	r2, r3
 800101e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4bbb      	ldr	r3, [pc, #748]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800102c:	2102      	movs	r1, #2
 800102e:	6011      	str	r1, [r2, #0]
 8001030:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	fa92 f1a2 	rbit	r1, r2
 800103a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800103e:	6011      	str	r1, [r2, #0]
  return result;
 8001040:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d099      	beq.n	8000f96 <HAL_RCC_OscConfig+0x8c6>
 8001062:	e063      	b.n	800112c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff fa72 	bl	800054c <HAL_GetTick>
 8001068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fa6d 	bl	800054c <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	; 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e225      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 8001086:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800108a:	2202      	movs	r2, #2
 800108c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	fa93 f2a3 	rbit	r2, r3
 8001098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010a2:	2202      	movs	r2, #2
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	fa93 f2a3 	rbit	r2, r3
 80010b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010b4:	601a      	str	r2, [r3, #0]
  return result;
 80010b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d102      	bne.n	80010d6 <HAL_RCC_OscConfig+0xa06>
 80010d0:	4b90      	ldr	r3, [pc, #576]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	e00d      	b.n	80010f2 <HAL_RCC_OscConfig+0xa22>
 80010d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010da:	2202      	movs	r2, #2
 80010dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	fa93 f2a3 	rbit	r2, r3
 80010e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	4b89      	ldr	r3, [pc, #548]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80010f6:	2102      	movs	r1, #2
 80010f8:	6011      	str	r1, [r2, #0]
 80010fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	fa92 f1a2 	rbit	r1, r2
 8001104:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001108:	6011      	str	r1, [r2, #0]
  return result;
 800110a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	fab2 f282 	clz	r2, r2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f002 021f 	and.w	r2, r2, #31
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f202 	lsl.w	r2, r1, r2
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1a0      	bne.n	800106e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800112c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001134:	4b77      	ldr	r3, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a76      	ldr	r2, [pc, #472]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 800113a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800113e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 81c2 	beq.w	80014d0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800114c:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	f000 819c 	beq.w	8001492 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	2b02      	cmp	r3, #2
 8001162:	f040 8114 	bne.w	800138e <HAL_RCC_OscConfig+0xcbe>
 8001166:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800116a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800116e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	fa93 f2a3 	rbit	r2, r3
 800117a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800117e:	601a      	str	r2, [r3, #0]
  return result;
 8001180:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001184:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001190:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	461a      	mov	r2, r3
 8001198:	2300      	movs	r3, #0
 800119a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff f9d6 	bl	800054c <HAL_GetTick>
 80011a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a4:	e009      	b.n	80011ba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff f9d1 	bl	800054c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e18b      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 80011ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	fa93 f2a3 	rbit	r2, r3
 80011ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011d2:	601a      	str	r2, [r3, #0]
  return result;
 80011d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0xb24>
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	e01b      	b.n	800122c <HAL_RCC_OscConfig+0xb5c>
 80011f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	fa93 f2a3 	rbit	r2, r3
 8001222:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001230:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001234:	6011      	str	r1, [r2, #0]
 8001236:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	fa92 f1a2 	rbit	r1, r2
 8001240:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001244:	6011      	str	r1, [r2, #0]
  return result;
 8001246:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	fab2 f282 	clz	r2, r2
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f002 021f 	and.w	r2, r2, #31
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d19e      	bne.n	80011a6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	430b      	orrs	r3, r1
 800127e:	4925      	ldr	r1, [pc, #148]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
 8001284:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800128c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fa93 f2a3 	rbit	r2, r3
 8001298:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129c:	601a      	str	r2, [r3, #0]
  return result;
 800129e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	461a      	mov	r2, r3
 80012b6:	2301      	movs	r3, #1
 80012b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff f947 	bl	800054c <HAL_GetTick>
 80012be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c2:	e009      	b.n	80012d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff f942 	bl	800054c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e0fc      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 80012d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	fa93 f2a3 	rbit	r2, r3
 80012ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f0:	601a      	str	r2, [r3, #0]
  return result;
 80012f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0xc48>
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <HAL_RCC_OscConfig+0xc44>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	e01e      	b.n	8001350 <HAL_RCC_OscConfig+0xc80>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800131c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fa93 f2a3 	rbit	r2, r3
 800132c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fa93 f2a3 	rbit	r2, r3
 8001346:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_OscConfig+0xe0c>)
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001354:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001358:	6011      	str	r1, [r2, #0]
 800135a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	fa92 f1a2 	rbit	r1, r2
 8001364:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001368:	6011      	str	r1, [r2, #0]
  return result;
 800136a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	fab2 f282 	clz	r2, r2
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f042 0220 	orr.w	r2, r2, #32
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f002 021f 	and.w	r2, r2, #31
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d09b      	beq.n	80012c4 <HAL_RCC_OscConfig+0xbf4>
 800138c:	e0a0      	b.n	80014d0 <HAL_RCC_OscConfig+0xe00>
 800138e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001392:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	601a      	str	r2, [r3, #0]
  return result;
 80013a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	461a      	mov	r2, r3
 80013c0:	2300      	movs	r3, #0
 80013c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff f8c2 	bl	800054c <HAL_GetTick>
 80013c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff f8bd 	bl	800054c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e077      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
 80013e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f2a3 	rbit	r2, r3
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	601a      	str	r2, [r3, #0]
  return result;
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	fab3 f383 	clz	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	095b      	lsrs	r3, r3, #5
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <HAL_RCC_OscConfig+0xd4c>
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_RCC_OscConfig+0xe0c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	e01b      	b.n	8001454 <HAL_RCC_OscConfig+0xd84>
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa93 f2a3 	rbit	r2, r3
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_RCC_OscConfig+0xe0c>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	f107 0210 	add.w	r2, r7, #16
 8001458:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800145c:	6011      	str	r1, [r2, #0]
 800145e:	f107 0210 	add.w	r2, r7, #16
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	fa92 f1a2 	rbit	r1, r2
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	6011      	str	r1, [r2, #0]
  return result;
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f002 021f 	and.w	r2, r2, #31
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d19e      	bne.n	80013ce <HAL_RCC_OscConfig+0xcfe>
 8001490:	e01e      	b.n	80014d0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e018      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_RCC_OscConfig+0xe0c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80014a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d108      	bne.n	80014cc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80014ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b09e      	sub	sp, #120	; 0x78
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e162      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f8:	4b90      	ldr	r3, [pc, #576]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d910      	bls.n	8001528 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b8d      	ldr	r3, [pc, #564]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 0207 	bic.w	r2, r3, #7
 800150e:	498b      	ldr	r1, [pc, #556]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e14a      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001534:	4b82      	ldr	r3, [pc, #520]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	497f      	ldr	r1, [pc, #508]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80dc 	beq.w	800170c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d13c      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xf6>
 800155c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001560:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800156a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d102      	bne.n	8001586 <HAL_RCC_ClockConfig+0xa6>
 8001580:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e00f      	b.n	80015a6 <HAL_RCC_ClockConfig+0xc6>
 8001586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	667b      	str	r3, [r7, #100]	; 0x64
 8001594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001598:	663b      	str	r3, [r7, #96]	; 0x60
 800159a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80015ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80015b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015b6:	fab2 f282 	clz	r2, r2
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f002 021f 	and.w	r2, r2, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d17b      	bne.n	80016ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0f3      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d13c      	bne.n	8001658 <HAL_RCC_ClockConfig+0x178>
 80015de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80015ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d102      	bne.n	8001608 <HAL_RCC_ClockConfig+0x128>
 8001602:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	e00f      	b.n	8001628 <HAL_RCC_ClockConfig+0x148>
 8001608:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
 8001616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
 800161c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162c:	63ba      	str	r2, [r7, #56]	; 0x38
 800162e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001630:	fa92 f2a2 	rbit	r2, r2
 8001634:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f042 0220 	orr.w	r2, r2, #32
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f002 021f 	and.w	r2, r2, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d13a      	bne.n	80016ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0b2      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
 8001658:	2302      	movs	r3, #2
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_RCC_ClockConfig+0x1a0>
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	e00d      	b.n	800169c <HAL_RCC_ClockConfig+0x1bc>
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	2202      	movs	r2, #2
 800169e:	61ba      	str	r2, [r7, #24]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	fa92 f2a2 	rbit	r2, r2
 80016a6:	617a      	str	r2, [r7, #20]
  return result;
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	fab2 f282 	clz	r2, r2
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f042 0220 	orr.w	r2, r2, #32
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f002 021f 	and.w	r2, r2, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e079      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	491a      	ldr	r1, [pc, #104]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7fe ff36 	bl	800054c <HAL_GetTick>
 80016e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7fe ff32 	bl	800054c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e061      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_ClockConfig+0x260>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d214      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4906      	ldr	r1, [pc, #24]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_RCC_ClockConfig+0x25c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e040      	b.n	80017be <HAL_RCC_ClockConfig+0x2de>
 800173c:	40022000 	.word	0x40022000
 8001740:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_ClockConfig+0x2e8>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	491a      	ldr	r1, [pc, #104]	; (80017c8 <HAL_RCC_ClockConfig+0x2e8>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_RCC_ClockConfig+0x2e8>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4912      	ldr	r1, [pc, #72]	; (80017c8 <HAL_RCC_ClockConfig+0x2e8>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001782:	f000 f829 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8001786:	4601      	mov	r1, r0
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_RCC_ClockConfig+0x2e8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001790:	22f0      	movs	r2, #240	; 0xf0
 8001792:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	fa92 f2a2 	rbit	r2, r2
 800179a:	60fa      	str	r2, [r7, #12]
  return result;
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	40d3      	lsrs	r3, r2
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x2ec>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	fa21 f303 	lsr.w	r3, r1, r3
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_ClockConfig+0x2f0>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x2f4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe84 	bl	80004c4 <HAL_InitTick>
  
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3778      	adds	r7, #120	; 0x78
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	0800191c 	.word	0x0800191c
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x30>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x36>
 8001806:	e03c      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_GetSysClockFreq+0xc4>)
 800180a:	623b      	str	r3, [r7, #32]
      break;
 800180c:	e03c      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001814:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001818:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	fa92 f2a2 	rbit	r2, r2
 8001820:	607a      	str	r2, [r7, #4]
  return result;
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	fab2 f282 	clz	r2, r2
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	40d3      	lsrs	r3, r2
 800182c:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	220f      	movs	r2, #15
 800183c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	fa92 f2a2 	rbit	r2, r2
 8001844:	60fa      	str	r2, [r7, #12]
  return result;
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	fab2 f282 	clz	r2, r2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	40d3      	lsrs	r3, r2
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001860:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	fbb2 f2f3 	udiv	r2, r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	e004      	b.n	800187c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	623b      	str	r3, [r7, #32]
      break;
 8001880:	e002      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001884:	623b      	str	r3, [r7, #32]
      break;
 8001886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001888:	6a3b      	ldr	r3, [r7, #32]
}
 800188a:	4618      	mov	r0, r3
 800188c:	372c      	adds	r7, #44	; 0x2c
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	007a1200 	.word	0x007a1200
 80018a0:	0800192c 	.word	0x0800192c
 80018a4:	0800193c 	.word	0x0800193c
 80018a8:	003d0900 	.word	0x003d0900

080018ac <__libc_init_array>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4e0d      	ldr	r6, [pc, #52]	; (80018e4 <__libc_init_array+0x38>)
 80018b0:	4c0d      	ldr	r4, [pc, #52]	; (80018e8 <__libc_init_array+0x3c>)
 80018b2:	1ba4      	subs	r4, r4, r6
 80018b4:	10a4      	asrs	r4, r4, #2
 80018b6:	2500      	movs	r5, #0
 80018b8:	42a5      	cmp	r5, r4
 80018ba:	d109      	bne.n	80018d0 <__libc_init_array+0x24>
 80018bc:	4e0b      	ldr	r6, [pc, #44]	; (80018ec <__libc_init_array+0x40>)
 80018be:	4c0c      	ldr	r4, [pc, #48]	; (80018f0 <__libc_init_array+0x44>)
 80018c0:	f000 f820 	bl	8001904 <_init>
 80018c4:	1ba4      	subs	r4, r4, r6
 80018c6:	10a4      	asrs	r4, r4, #2
 80018c8:	2500      	movs	r5, #0
 80018ca:	42a5      	cmp	r5, r4
 80018cc:	d105      	bne.n	80018da <__libc_init_array+0x2e>
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d4:	4798      	blx	r3
 80018d6:	3501      	adds	r5, #1
 80018d8:	e7ee      	b.n	80018b8 <__libc_init_array+0xc>
 80018da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018de:	4798      	blx	r3
 80018e0:	3501      	adds	r5, #1
 80018e2:	e7f2      	b.n	80018ca <__libc_init_array+0x1e>
 80018e4:	0800194c 	.word	0x0800194c
 80018e8:	0800194c 	.word	0x0800194c
 80018ec:	0800194c 	.word	0x0800194c
 80018f0:	08001950 	.word	0x08001950

080018f4 <memset>:
 80018f4:	4402      	add	r2, r0
 80018f6:	4603      	mov	r3, r0
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d100      	bne.n	80018fe <memset+0xa>
 80018fc:	4770      	bx	lr
 80018fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001902:	e7f9      	b.n	80018f8 <memset+0x4>

08001904 <_init>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr

08001910 <_fini>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr
